<?php

namespace Admin\MedicalBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StaticArticlesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StaticArticlesRepository extends EntityRepository
{
	/**
     * function deleteData
     *   
	 * @param array $asIds static article ids.
     *
     * @todo   Function to delete articles.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function deleteData($asIds) 
    {
        $asData = $this->getEntityManager()
            ->createQuery('Delete FROM AdminMedicalBundle:StaticArticles i where i.id IN ('.$asIds.')')
             ->execute();
		return true;
    }
	
	/**
     * function updateData
     *   
	 * @param array   $asIds    static article ids.
	 * @param boolean $ssStatus status.
     *
     * @todo   Function to update data.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function updateData($asIds, $ssStatus) 
    {		
        $asData = $this->getEntityManager()
            ->createQuery("UPDATE AdminMedicalBundle:StaticArticles n SET n.status = '".$ssStatus."' where n.id IN (".$asIds.")")
             ->execute();
		return true;
    }
	
	/**
     * function getDetailByArticleType
     *      	 
     * @param string  $ssType   type
	 * @param string  $ssLocale currentlocale.
     *
     * @todo   Function to get article detail by its type.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getDetailByArticleType($ssType, $ssLocale)
	{
		return $ssQuery = $this->createQueryBuilder('sa')
						->select('sa')						
						->Where('sa.article_type= :ssType')
						->setParameter('ssType', $ssType)
						->andWhere('sa.status= :ssStatus')
						->setParameter('ssStatus', 'Published')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
	}
	
	/**
     * function getAllArticlesDetail
     * 
	 * @param  string $ssLocale currentlocale.
     *
     * @todo   Function get static article all detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
    public function getAllArticlesDetail($ssLocale='en')
    {
		return $ssQuery = $this->createQueryBuilder('s')
						->select('partial s.{id,title,status,created_at}')						
						->getQuery()					 
					    ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
					    ->getArrayResult();
	}
}