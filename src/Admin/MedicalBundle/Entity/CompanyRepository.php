<?php

namespace Admin\MedicalBundle\Entity;

use Client\MedicalBundle\Services\Company\NameEditor;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\ResultSetMapping;
require_once('Encoding.php');
use \ForceUTF8\Encoding;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository implements UserProviderInterface
{
    public function getCompanyById($id)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :company')
            ->setParameter("company", $id)
            ->getQuery()
            ->getArrayResult();

        return $q;
    }

    public function findAllClinics() {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u.name')
            ->getQuery()
            ->getArrayResult();

        return $q;
    }

	/**
     * function deleteData
     *
     * @param array $asIds field name
     *
     * @todo   Function delete company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function loadUserByUsername($email)
    {

        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :email')
            ->setParameter("email", $email)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException('No user found for email '.$email);
        }
        return $user;
    }

	/**
     * function deleteData
     *
     * @param array $asIds field name
     *
     * @todo   Function delete company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }
	/**
     * function deleteData
     *
     * @param array $asIds field name
     *
     * @todo   Function delete company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
	 public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }


	/**
     * function deleteData
     *
     * @param array $asIds field name
     *
     * @todo   Function delete company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function deleteData($asIds)
    {
        return $asData = $this->getEntityManager()
            ->createQuery('Delete FROM AdminMedicalBundle:Company i where i.id IN ('.$asIds.')')
             ->execute();
    }

	/**
     * function getCompanyDetail
     *
     * @param integer $snIdCompany field name
     *
     * @todo   Function get company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
    public function getCompanyDetail($snIdCompany)
    {
        return $asData = $this->getEntityManager()
            ->createQuery('SELECT c FROM AdminMedicalBundle:Company c where c.id = '.$snIdCompany.' ORDER BY c.name ASC')
            ->getArrayResult();
    }

	/**
     * function getCompanyAllDetail
     *
     * @param integer $ssSearchParam     field name
     * @param integer $snCategoryIds     category_ids
	 * @param string  $ssCityName        city name
     * @param string  $ssLanguages       langauge
	 * @param string  $ssPaymentOption   payment option
	 * @param integer $ssInsuranceIds    insurance ids
	 * @param string  $ssLocale          locale
     * @param integer $snIdUser          user id
	 * @param integer $ssRating          rating
	 * @param integer $ssRatingSlider    rating slider
	 * @param integer $ssClinicRating    clinic rating
     *
     * @todo   Function get all company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getCompanyAllDetail($ssSearchParam='', $snCategoryIds='', $ssCityName='', $ssLanguages='', $ssPaymentOption='', $ssInsuranceIds='', $ssLocale, $ssRating='',$ssRatingSlider='', $ssClinicRating='')
    {
		$config = $this->getEntityManager()->getConfiguration();
		$config->addCustomNumericFunction('IFNULL', 'DoctrineExtensions\Query\Mysql\IfNull');

		$ssSubQueryUserCompanies = $this->getEntityManager()
            ->createQuery('SELECT COUNT(ucq.company) FROM AdminMedicalBundle:UserCompanyQuotes ucq where ucq.company = c.id');

		$ssSubQueryRatingAvg = $this->getEntityManager()
            ->createQuery('SELECT ((AVG(r.services) + AVG(r.staff) + AVG(r.environment)) / 3) FROM AdminMedicalBundle:Ratings r where r.company = c.id and r.verify_flag = 1');

		$ssSubQueryRatingCnt = $this->getEntityManager()
            ->createQuery('SELECT COUNT(rsss.company) FROM AdminMedicalBundle:Ratings rsss where rsss.company = c.id and rsss.verify_flag = 1');

		$ssQuery = $this->createQueryBuilder('c')
						->select('ci,partial c.{id,name,address},ct,partial ctt.{id,name},partial d.{id,firstname,lastname},partial i.{id},partial lang.{name, id, flag},partial payment.{id,title}, partial s.{id,description},partial p.{id,description},('.$ssSubQueryUserCompanies->getDQL().') as count_popularity,IFNULL(('.$ssSubQueryRatingAvg->getDQL().'),0) as total_avg,('.$ssSubQueryRatingCnt->getDQL().') as total_rating_count')
						->leftJoin('c.companyimages', 'ci')
						->leftJoin('c.languagess', 'lang')
						->leftJoin('c.paymentoptions', 'payment')
						->leftJoin('c.category', 'ct')
						->leftJoin('ct.roots', 'ctt')
						->leftJoin('c.service', 's')
						->leftJoin('c.doctors', 'd')
						->leftJoin('c.prices', 'p')
						//->leftJoin('c.experience', 'e')
						->leftJoin('c.insurances', 'i');

		if($ssRating != '')
		{
			switch($ssRating)
			{
				case 'best':
					$ssQuery->orderBy('total_avg','DESC');
				break;
				case 'worst':
					$ssQuery->orderBy('total_avg','ASC');
				break;
				case 'most':
					$ssQuery->orderBy('count_popularity','DESC');
				break;
				case 'less':
					$ssQuery->orderBy('count_popularity','ASC');
				break;
			}
		}
		else
		{
			$ssQuery->orderBy('total_avg','DESC');
		}
		if($snCategoryIds != '')
		{
			$ssQuery->andWhere('ctt.id IN ('.$snCategoryIds.')');
		}
		if($ssSearchParam != '')
		{
			$asSearchData = preg_split("/[\s,]+/", $ssSearchParam);
			foreach($asSearchData as $snKey=>$ssVal)
			{
                $em = $this->getEntityManager();
				$connection = $em->getConnection();
				$statement = $connection->prepare("SELECT cm.id as companyid, cm.name, cm.address,d.id, d.firstname, d.lastname, pt.id, pt.content, pt.locale, st.id, st.content, st.locale FROM company cm LEFT JOIN company_doctor cd ON cm.id = cd.company_id LEFT JOIN doctor d ON d.id = cd.doctor_id LEFT JOIN prices ps ON cm.id = ps.company_id LEFT JOIN pricestranslation pt ON ps.id = pt.object_id AND pt.locale = 'lt' LEFT JOIN service sv ON cm.id = sv.company_id LEFT JOIN servicetranslation st ON sv.id = st.object_id AND st.locale = 'lt'  WHERE (cm.name like :keyword) OR (d.firstname like :keyword AND d.firstname IS NOT NULL) OR (d.lastname like :keyword AND d.lastname IS NOT NULL) OR (pt.content like :keyword AND pt.content IS NOT NULL) OR (st.content like :keyword AND st.content IS NOT NULL) GROUP BY cm.id");
				$statement->bindValue('keyword', '%'.$ssVal.'%');
				$statement->execute();
				$results = $statement->fetchAll();

				$ID = array();
				if(count($results)>0)
				{
					foreach($results as $k=>$v)
					{
						$ID[] = $v['companyid'];
					}
				}
				else
				{
					$ID[] = 0;
				}
				$ssQuery->andWhere('c.id IN ('.implode(',',$ID).')');
			}
		}
		if($ssCityName != '')
		{
			if($ssCityName == 'Other')
			{
				$ssLangaugeQuery = $this->getEntityManager()
								->createQuery("SELECT ttt.id,ttt.name FROM AdminMedicalBundle:City ttt where ttt.name != 'Other'")
								->getArrayResult();
				$asCitites = array();
                if(is_array($ssLangaugeQuery) && !empty($ssLangaugeQuery))
				{
					foreach($ssLangaugeQuery as $snKey=>$asVal)
					{
						$asCitites[] = $asVal['name'];
					}

					foreach($asCitites as $snKey=>$ssVal)
					{
						$ssQuery->andWhere('c.city NOT LIKE :ssCityName'.$snKey)
							->setParameter('ssCityName'.$snKey, '%'.$ssVal.'%');
					}
				}

			}
			else
			{
				$asSearchData = explode(',', $ssCityName);
				foreach($asSearchData as $snKey=>$ssVal)
				{
					$ssQuery->andWhere('c.city LIKE :ssCityName'.$snKey.' OR c.address LIKE :ssAddressParam'.$snKey)
						->setParameter('ssCityName'.$snKey, '%'.trim($ssVal).'%')
						->setParameter('ssAddressParam'.$snKey, '%'.trim($ssVal).'%');
				}
			}
		}
		if($ssLanguages != '')
		{
			$ssLangaugeQuery = $this->createQueryBuilder('cmp')
						->select('partial cmp.{id}, partial lng.{id}')
						->leftJoin('cmp.languagess', 'lng')
						->andWhere('lng.id IN ('.$ssLanguages.')')
						->getQuery()
						->getArrayResult();
			if(is_array($ssLangaugeQuery) && !empty($ssLangaugeQuery))
			{
				$asCompanyIds = array();
				foreach($ssLangaugeQuery as $snKey=>$asVal)
				{
					$asCompanyIds[] = $asVal['id'];
				}
				$ssQuery->andWhere('c.id IN ('.implode(',',$asCompanyIds).')');
			}
		}
		if($ssPaymentOption != '')
		{
			$ssQuery->andWhere('payment.id IN ('.$ssPaymentOption.')');
		}
		if($ssInsuranceIds != '')
		{
			$ssQuery->andWhere('i.id IN ('.$ssInsuranceIds.')');
		}

		if($ssRatingSlider != '')
		{
			$asRate = explode(',', $ssRatingSlider);
			foreach($asRate as $snKey=>$ssVal)
			{
				if($ssVal == 'H')
					$ssQuery->orHaving('total_avg >= 8 and total_avg <= 10');
				if($ssVal == 'A')
					$ssQuery->orHaving('total_avg >= 5 and total_avg <= 7');
				if($ssVal == 'L')
					$ssQuery->orHaving('total_avg >= 0 and total_avg <= 4');
			}
		}
		if($ssClinicRating != '')
		{
			$ssQuery->having('total_avg >= '.$ssClinicRating);
		}
		return  $ssQuery->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_FORCE_PARTIAL_LOAD, true)
						//->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN,true)
					    ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						//->useResultCache(true)
					    ->getArrayResult();
	}

    public function getCategoryByCompany($id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare(
            "SELECT cat.name, cc.id, cc.minprice, cc.maxprice
                    FROM company cm
                    LEFT JOIN company_category cc
                    ON cm.id = cc.company_id
                    LEFT JOIN category cat
                    ON cc.category_id = cat.id
                    WHERE (cm.id = :keyword)"
        );

        $statement->bindValue('keyword', $id);
        $statement->execute();
        $results = $statement->fetchAll();
        return $results;
    }
	/**
     * function getCompanyAllDetailForSearch
     *
     * @param integer $ssSearchParam     field name
	 * @param string  $ssCityName        city name
     * @param string  $ssLanguages       langauge
	 * @param string  $ssPaymentOption   payment option
	 * @param string  $ssLocale          locale
     *
     * @todo   Function get all company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getCompanyAllDetailForSearch($ssSearchParam='', $ssCityName='', $ssLanguages='', $ssPaymentOption='', $ssLocale )
    {

		$config = $this->getEntityManager()->getConfiguration();
		$config->addCustomNumericFunction('IFNULL', 'DoctrineExtensions\Query\Mysql\IfNull');

		$ssSubQueryUserCompanies = $this->getEntityManager()
            ->createQuery('SELECT COUNT(ucq.company) FROM AdminMedicalBundle:UserCompanyQuotes ucq where ucq.company = c.id');

		$ssSubQueryRatingAvg = $this->getEntityManager()
            ->createQuery('SELECT ((AVG(r.services) + AVG(r.staff) + AVG(r.environment)) / 3) FROM AdminMedicalBundle:Ratings r where r.company = c.id
 and r.verify_flag = 1');

		$ssSubQueryRatingCnt = $this->getEntityManager()
            ->createQuery('SELECT COUNT(rsss.company) FROM AdminMedicalBundle:Ratings rsss where rsss.company = c.id and rsss.verify_flag = 1');

		$ssQuery = $this->createQueryBuilder('c')
				//->select('partial pt.{id,content},partial st.{id,content},ci,partial c.{id,name,address},ct,partial ctt.{id,name},partial d.{id,firstname,lastname},partial i.{id},partial lang.{name, id, flag},partial payment.{id,title}, partial s.{id,description},partial p.{id,description},('.$ssSubQueryUserCompanies->getDQL().') as count_popularity,IFNULL(('.$ssSubQueryRatingAvg->getDQL().'),0) as total_avg,('.$ssSubQueryRatingCnt->getDQL().') as total_rating_count' )
				->select('ci,partial c.{id,name,address},ct,partial ctt.{id,name},partial d.{id,firstname,lastname},partial
				i.{id},partial lang.{name, id, flag},partial payment.{id,title}, partial s.{id,description},partial p.{id,description},
				('.$ssSubQueryUserCompanies->getDQL().') as count_popularity,IFNULL(('.$ssSubQueryRatingAvg->getDQL().'),
				0) as total_avg,('.$ssSubQueryRatingCnt->getDQL().') as total_rating_count' )
						->leftJoin('c.companyimages', 'ci')
						->leftJoin('c.languagess', 'lang')
						->leftJoin('c.paymentoptions', 'payment')
						->leftJoin('c.category', 'ct')
						->leftJoin('ct.roots', 'ctt')
						->leftJoin('c.service', 's')
						->leftJoin('c.doctors', 'd')
						->leftJoin('c.prices', 'p')
						//->leftJoin('p.translations', 'pt')
						//->leftJoin('s.translations', 'st')
						->leftJoin('c.insurances', 'i');


		$ssQuery->orderBy('total_avg','DESC');


		if($ssSearchParam != '')
		{
//			$asSearchData = explode(',', $ssSearchParam);
			$asSearchData = preg_split("/[\s,]+/", $ssSearchParam);
			foreach($asSearchData as $snKey=>$ssVal)
			{
				$em = $this->getEntityManager();
				$connection = $em->getConnection();
				$statement = $connection->prepare("
                SELECT cm.id as companyid,
                cm.name,
                cm.address,
                d.id,
                d.firstname,
                d.lastname,
                pt.id,
                pt.content,
                pt.locale,
                st.id,
                st.content,
                st.locale
                FROM company cm
                LEFT JOIN company_doctor cd ON cm.id = cd.company_id
                LEFT JOIN doctor d ON d.id = cd.doctor_id
                LEFT JOIN prices ps ON cm.id = ps.company_id
                LEFT JOIN pricestranslation pt ON ps.id = pt.object_id AND pt.locale = 'lt'
                LEFT JOIN service sv ON cm.id = sv.company_id
                LEFT JOIN servicetranslation st ON sv.id = st.object_id AND st.locale = 'lt'
                WHERE (cm.name like :keyword)
                OR (d.firstname like :keyword AND d.firstname IS NOT NULL)
                OR (d.lastname like :keyword AND d.lastname IS NOT NULL)
                OR (pt.content like :keyword AND pt.content IS NOT NULL)
                OR (st.content like :keyword AND st.content IS NOT NULL)
                GROUP BY cm.id");
				$statement->bindValue('keyword', '%'.$ssVal.'%');
				$statement->execute();
				$results = $statement->fetchAll();

				$ID = array();
				if(count($results)>0)
				{
					foreach($results as $k=>$v)
					{
						$ID[] = $v['companyid'];
					}
				}
				else
				{
					$ID[] = 0;
				}
				$ssQuery->andWhere('c.id IN ('.implode(',',$ID).')');
			}
		}

		if($ssCityName != '')
		{
			if($ssCityName == 'Other')
			{
				$ssLangaugeQuery = $this->getEntityManager()
								->createQuery("SELECT ttt.id,ttt.name FROM AdminMedicalBundle:City ttt where ttt.name != 'Other'")
								->getArrayResult();
				$asCitites = array();
                if(is_array($ssLangaugeQuery) && !empty($ssLangaugeQuery))
				{
					foreach($ssLangaugeQuery as $snKey=>$asVal)
					{
						$asCitites[] = $asVal['name'];
					}

					foreach($asCitites as $snKey=>$ssVal)
					{
						$ssQuery->andWhere('c.city NOT LIKE :ssCityName'.$snKey)
							->setParameter('ssCityName'.$snKey, '%'.$ssVal.'%');
					}
				}

			}
			else
			{
				$asSearchData = explode(',', $ssCityName);
				foreach($asSearchData as $snKey=>$ssVal)
				{
					$ssQuery->andWhere('c.city LIKE :ssCityName'.$snKey.' OR c.address LIKE :ssAddressParam'.$snKey)
						->setParameter('ssCityName'.$snKey, '%'.trim($ssVal).'%')
						->setParameter('ssAddressParam'.$snKey, '%'.trim($ssVal).'%');
				}
			}
		}
		if($ssLanguages != '')
		{
			$ssLangaugeQuery = $this->createQueryBuilder('cmp')
						->select('partial cmp.{id}, partial lng.{id}')
						->leftJoin('cmp.languagess', 'lng')
						->andWhere('lng.id IN ('.$ssLanguages.')')
						->getQuery()
						->getArrayResult();
			if(is_array($ssLangaugeQuery) && !empty($ssLangaugeQuery))
			{
				$asCompanyIds = array();
				foreach($ssLangaugeQuery as $snKey=>$asVal)
				{
					$asCompanyIds[] = $asVal['id'];
				}
				$ssQuery->andWhere('c.id IN ('.implode(',',$asCompanyIds).')');
			}
		}
		if($ssPaymentOption != '')
		{
			$ssQuery->andWhere('payment.id IN ('.$ssPaymentOption.')');
		}

		return $ssQuery->getQuery()
				 ->setHint(\Doctrine\ORM\Query::HINT_REFRESH, true)
						->setHint(\Doctrine\ORM\Query::HINT_FORCE_PARTIAL_LOAD, true)
					    ->getArrayResult();
	}

	/**
     * function getCompanyAllDetailForSearch_new
     *
     * @param string $ssSearchParam     field name
	 * @param string  $ssCityName        city name
     * @param string  $ssLanguages       langauge
	 * @param string  $ssPaymentOption   payment option
	 * @param string  $ssLocale          locale
     *
     * @todo   Function get all company detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getCompanyAllDetailForSearch_new($ssSearchParam='',$ssCityName='',$ssPaymentOption='',$ssLanguages='',$ssLocale, $ssRating='most')
    {
		$config = $this->getEntityManager()->getConfiguration();
		$config->addCustomNumericFunction('IFNULL', 'DoctrineExtensions\Query\Mysql\IfNull');

		$ssQuery = $this->createQueryBuilder('c')
				->select('partial c.{id,name,address},partial lang.{name, id, flag},ct,partial ctt.{id,name}' )
					->leftJoin('c.languagess', 'lang')
					->leftJoin('c.paymentoptions', 'payment')
					->leftJoin('c.category', 'ct')
					->leftJoin('ct.roots', 'ctt')
					->leftJoin('c.service', 's')
					->leftJoin('c.doctors', 'd')
					->leftJoin('c.prices', 'p')
					->leftJoin('c.insurances', 'i');
		if($ssSearchParam != '')
		{
			$asSearchData = preg_split("/[\s,]+/", $ssSearchParam);
			foreach($asSearchData as $snKey=>$ssVal)
			{
				$em = $this->getEntityManager();
				$connection = $em->getConnection();
				$statement = $connection->prepare(
                    "SELECT
                      cm.id as companyid,
                      cm.city,
                      cm.name,
                      cm.address,
                      cat.name as categoryname,
                      cat.id as categoryid,
                      cc.minprice as minprice,
                      cc.maxprice as maxprice
                    FROM company cm
                    LEFT JOIN company_category cc
                    ON cm.id = cc.company_id
                    LEFT JOIN category cat
                    ON cc.category_id = cat.id
                    WHERE (cat.name like :keyword)"
                );
				$statement->bindValue('keyword', '%'.$ssVal.'%');
				$statement->execute();
				$results = $statement->fetchAll();

				$ID = array();
                $categoryNames = [];
                $categoryCities = [];
                $categoryIds = [];
                $minprices = [];
                $maxprices = [];
                $type = [];
                $doctor = [];
                $doctorId = [];
				if(count($results)>0)
				{
					foreach($results as $k=>$v)
					{
						$ID[] = $v['companyid'];
                        $categoryNames[$v['companyid']] = $v['categoryname'];
                        $categoryCities[$v['companyid']] = $v['city'];
                        $categoryIds[$v['companyid']] = $v['categoryid'];
                        $minprices[$v['companyid']] = $v['minprice'];
                        $maxprices[$v['companyid']] = $v['maxprice'];
                        $type[$v['companyid']] = 'category';
                        $doctor[$v['companyid']] = '';
                        $doctorId[$v['companyid']] = '';
					}
				}

                $statement = $connection->prepare(
                    "SELECT
                      cm.id as companyid,
                      cm.city,
                      cm.name,
                      cm.address
                    FROM company cm
                    WHERE (cm.name like :keyword)"
                );
                $statement->bindValue('keyword', '%'.$ssVal.'%');
                $statement->execute();
                $results = $statement->fetchAll();

                if(count($results)>0)
                {
                    foreach($results as $k=>$v)
                    {
                        $ID[] = $v['companyid'];
                        $categoryNames[$v['companyid']] = '';
                        $categoryCities[$v['companyid']] = '';
                        $categoryIds[$v['companyid']] = '';
                        $minprices[$v['companyid']] = '';
                        $maxprices[$v['companyid']] = '';
                        $type[$v['companyid']] = 'company';
                        $doctor[$v['companyid']] = '';
                        $doctorId[$v['companyid']] = '';
                    }
                }


                $statement = $connection->prepare(
                    "SELECT
                      cm.id as companyid,
                      cm.city,
                      cm.name,
                      cm.address,
                      d.id as doctorid,
                      d.firstname,
                      d.lastname
                    FROM company cm
                    LEFT JOIN company_doctor cd
                    ON cm.id = cd.company_id
                    LEFT JOIN doctor d
                    ON d.id = cd.doctor_id
                    WHERE (d.firstname like :keyword)
                    OR (d.lastname like :keyword)"
                );
                $statement->bindValue('keyword', '%'.$ssVal.'%');
                $statement->execute();
                $results = $statement->fetchAll();

                if(count($results)>0)
                {
                    foreach($results as $k=>$v)
                    {
                        $ID[] = $v['companyid'];
                        $categoryNames[$v['companyid']] = '';
                        $categoryCities[$v['companyid']] = '';
                        $categoryIds[$v['companyid']] = '';
                        $minprices[$v['companyid']] = '';
                        $maxprices[$v['companyid']] = '';
                        $type[$v['companyid']] = 'doctor';
                        $doctor[$v['companyid']] = [$v['lastname'], $v['firstname']];
                        $doctorId[$v['companyid']] = $v['doctorid'];
                    }
                }

                if(empty($ID)) {
                    $ID[] = 0;
                }
                $ssQuery->andWhere('c.id IN ('.implode(',',$ID).')');

			}
		}
		if($ssPaymentOption != '')
		{
			$ssQuery->andWhere('payment.id IN ('.$ssPaymentOption.')');
		}
		if($ssCityName != '')
		{
			if($ssCityName == 'Other')
			{
				$ssLangaugeQuery = $this->getEntityManager()
								->createQuery("SELECT ttt.id,ttt.name FROM AdminMedicalBundle:City ttt where ttt.name != 'Other'")
								->getArrayResult();
				$asCitites = array();
                if(is_array($ssLangaugeQuery) && !empty($ssLangaugeQuery))
				{
					foreach($ssLangaugeQuery as $snKey=>$asVal)
					{
						$asCitites[] = $asVal['name'];
					}

					foreach($asCitites as $snKey=>$ssVal)
					{
						$ssQuery->andWhere('c.city NOT LIKE :ssCityName'.$snKey)
							->setParameter('ssCityName'.$snKey, '%'.$ssVal.'%');
					}
				}

			}
			else
			{
				$asSearchData = explode(',', $ssCityName);
				foreach($asSearchData as $snKey=>$ssVal)
				{
					$ssQuery->andWhere('c.city LIKE :ssCityName'.$snKey.' OR c.address LIKE :ssAddressParam'.$snKey)
						->setParameter('ssCityName'.$snKey, '%'.trim($ssVal).'%')
						->setParameter('ssAddressParam'.$snKey, '%'.trim($ssVal).'%');
				}
			}
		}
		if($ssLanguages != '')
		{
			$ssLangaugeQuery = $this->createQueryBuilder('cmp')
						->select('partial cmp.{id}, partial lng.{id}')
						->leftJoin('cmp.languagess', 'lng')
						->andWhere('lng.id IN ('.$ssLanguages.')')
						->getQuery()
						->getArrayResult();
			if(is_array($ssLangaugeQuery) && !empty($ssLangaugeQuery))
			{
				$asCompanyIds = array();
				foreach($ssLangaugeQuery as $snKey=>$asVal)
				{
					$asCompanyIds[] = $asVal['id'];
				}
				$ssQuery->andWhere('c.id IN ('.implode(',',$asCompanyIds).')');
			}
		}

        ksort($categoryNames);
        ksort($categoryCities);
        ksort($categoryIds);
        ksort($minprices);
        ksort($maxprices);
        ksort($type);
        ksort($doctor);
        ksort($doctorId);

        $returnedResult = $ssQuery->getQuery()->getArrayResult();

        $freshResults = [];
        $nameEditor = new NameEditor;

        foreach($returnedResult as $key => $value) {
            $companyimg = $this->getCompanyImag($value['id']);
            $freshResults[] = [
                'id' => $value['id'],
                'name' => $value['name'],
                'address' => $value['address'],
                'companyimages' => $companyimg,
                'categoryName' => $categoryNames[$value['id']],
                'categoryNameRoute' => $nameEditor->addDashBetweenWords($categoryNames[$value['id']]),
                'city' => $categoryCities[$value['id']],
                'categoryid' => $categoryIds[$value['id']],
                'minprice' => $minprices[$value['id']],
                'maxprice' => $maxprices[$value['id']],
                'type' => $type[$value['id']],
                'doctor' => $doctor[$value['id']],
                'doctorId' => $doctorId[$value['id']]
            ];
        }

        if($ssRating != '')
        {
            switch($ssRating)
            {
                case 'best':
                    $theresults = [];
                    foreach($freshResults as $key=>$value) {
                        if($value['type'] == 'category') {
                            if($value['maxprice'] != '') {
                                $theresults[$value['id']] = intval($value['maxprice']);
                            } else {
                                $theresults[$value['id']] = -99999999999997;
                            }
                        } else if($value['type'] == 'company') {
                            $theresults[$value['id']] = -99999999999998;
                        } else if($value['type'] == 'doctor') {
                            $theresults[$value['id']] = -99999999999999;
                        }
                    }
                    arsort($theresults);
                    $toReturn = [];
                    foreach($theresults as $key => $value) {
                        foreach($freshResults as $k=>$v) {
                            if($v['id'] == $key) {
                                $toReturn[] = $v;
                                break;
                            }
                        }
                    }
                    $freshResults = $toReturn;
                    break;
                case 'worst':
                    $theresults = [];
                    foreach($freshResults as $key=>$value) {
                        if($value['type'] == 'category') {
                            if($value['minprice'] != '') {
                                $theresults[$value['id']] = intval($value['minprice']);
                            } else {
                                $theresults[$value['id']] = 99999999999997;
                            }
                        } else if($value['type'] == 'company') {
                            $theresults[$value['id']] = 99999999999998;
                        } else if($value['type'] == 'doctor') {
                            $theresults[$value['id']] = 99999999999999;
                        }
                    }
                    asort($theresults);
                    $toReturn = [];
                    foreach($theresults as $key => $value) {
                        foreach($freshResults as $k=>$v) {
                            if($v['id'] == $key) {
                                $toReturn[] = $v;
                                break;
                            }
                        }
                    }
                    $freshResults = $toReturn;
                    break;
                case 'most':
                    $theresults = [];
                    foreach($freshResults as $key=>$value) {
                        if($value['type'] == 'category') {
                            $theresults[$value['id']] = $value['categoryName'];
                        } else if($value['type'] == 'company') {
                            $theresults[$value['id']] = $value['name'];
                        } else if($value['type'] == 'doctor') {
                            $theresults[$value['id']] = $value['doctor'][0];
                        }
                    }
                    foreach($theresults as $key => $res) {
                        $val = str_replace('č', 'c', $res);
                        $val = str_replace('Č', 'C', $val);
                        $val = str_replace('ą', 'a', $val);
                        $val = str_replace('Ą', 'A', $val);
                        $val = str_replace(['ę', 'ė'], 'e', $val);
                        $val = str_replace(['Ę', 'Ė'], 'E', $val);
                        $val = str_replace('į', 'i', $val);
                        $val = str_replace('Į', 'I', $val);
                        $val = str_replace('š', 's', $val);
                        $val = str_replace('Š', 'S', $val);
                        $val = str_replace(['ų', 'ū'], 'u', $val);
                        $val = str_replace(['Ų', 'Ū'], 'U', $val);
                        $val = str_replace('ž', 'z', $val);
                        $val = str_replace('Ž', 'Z', $val);
                        $theresults[$key] = $val;
                    }
                    asort($theresults, SORT_STRING | SORT_FLAG_CASE | SORT_NATURAL);
                    $toReturn = [];
                    foreach($theresults as $key => $value) {
                        foreach($freshResults as $k=>$v) {
                            if($v['id'] == $key) {
                                $toReturn[] = $v;
                                break;
                            }
                        }
                    }
                    $freshResults = $toReturn;
                    break;
                case 'less':
                    $theresults = [];
                    foreach($freshResults as $key=>$value) {
                        if($value['type'] == 'category') {
                            $theresults[$value['id']] = $value['categoryName'];
                        } else if($value['type'] == 'company') {
                            $theresults[$value['id']] = $value['name'];
                        } else if($value['type'] == 'doctor') {
                            $theresults[$value['id']] = $value['doctor'][0];
                        }
                    }
                    foreach($theresults as $key => $res) {
                        $val = str_replace('č', 'c', $res);
                        $val = str_replace('Č', 'C', $val);
                        $val = str_replace('ą', 'a', $val);
                        $val = str_replace('Ą', 'A', $val);
                        $val = str_replace(['ę', 'ė'], 'e', $val);
                        $val = str_replace(['Ę', 'Ė'], 'E', $val);
                        $val = str_replace('į', 'i', $val);
                        $val = str_replace('Į', 'I', $val);
                        $val = str_replace('š', 's', $val);
                        $val = str_replace('Š', 'S', $val);
                        $val = str_replace(['ų', 'ū'], 'u', $val);
                        $val = str_replace(['Ų', 'Ū'], 'U', $val);
                        $val = str_replace('ž', 'z', $val);
                        $val = str_replace('Ž', 'Z', $val);
                        $theresults[$key] = $val;
                    }
                    arsort($theresults, SORT_STRING | SORT_FLAG_CASE | SORT_NATURAL);
                    $toReturn = [];
                    foreach($theresults as $key => $value) {
                        foreach($freshResults as $k=>$v) {
                            if($v['id'] == $key) {
                                $toReturn[] = $v;
                                break;
                            }
                        }
                    }
                    $freshResults = $toReturn;
                    break;
            }
        }

        return $freshResults;
	}

	/**
     * function getInsuranceDetail
     *
     * @param string $ssLocale locale
     *
     * @todo   Function get first five insurance companies who are assigned to most clinics.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getInsuranceDetail($ssLocale)
    {
		$asData = $this->createQueryBuilder('c')
						->select('c.name,c.id as company_id,i.id as insurance_id,i.name as insurance_name,(COUNT(i.id)) AS cnt')
						->innerJoin('c.insurances', 'i')
						->groupBy('i.id')
						->orderBy('cnt','DESC')
						->setMaxResults(5)
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
		$data = array();
		foreach($asData as $snKey=>$asValue)
		{
			$data[$asValue['insurance_id']] = $asValue['insurance_name'];
		}
		return $data;
	}

	/**
     * function getCityOfCOmpany
     *
     * @param integer $paraname    field name
     * @param integer $paraname    field name
     *
     * @todo   Function get city of company with groupby.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getCityOfCompany()
	 {
		return $data = $this->createQueryBuilder('c')
						->select('c.id, c.city')
						->groupBy('c.city')
						->getQuery()
						->getArrayResult();
	}

	/**
     * function getCityOfCOmpany
     *
     * @param integer $snCompanyId    field name
	 * @param integer $ssLocale    field name
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getCompanyDetailById($snCompanyId, $ssLocale)
	 {
		$ssSubQueryRatingAvg = $this->getEntityManager()
            ->createQuery('SELECT ((AVG(r.services) + AVG(r.staff) + AVG(r.environment)) / 3) FROM AdminMedicalBundle:Ratings r where r.company = c.id and r.verify_flag = 1');
		//$snDate = date('Y-m-d').' 00:00:00';
		$snDate = date('Y-m-d H:i:s');
		$ssQuery = $this->createQueryBuilder('c')
						->select('cv,ci,c,so,si,i,e,s,p,d,lang,payment,('.$ssSubQueryRatingAvg->getDQL().') as total_avg');

				$ssQuery->leftJoin('c.companyimages', 'ci')
						->leftJoin('c.companyvideos', 'cv')
						->leftJoin('c.languagess', 'lang')
						->leftJoin('c.paymentoptions', 'payment')
						->leftJoin('c.insurances', 'i')
						->leftJoin('c.specialoffers', 'so WITH '.$ssQuery->expr()->concat('so.end_date',$ssQuery->expr()->concat($ssQuery->expr()->literal(' '),'so.end_time')).'> :sndate AND '.$ssQuery->expr()->concat('so.start_date',$ssQuery->expr()->concat($ssQuery->expr()->literal(' '),'so.start_time')).'< :sndate AND so.status = :ssStatus')
						->leftJoin('so.specialofferimages', 'si')
						->leftJoin('c.service', 's')
						->leftJoin('c.experience', 'e')
						->leftJoin('c.prices', 'p')
						->leftJoin('c.doctors', 'd')
						->where('c.id= :snCompanyId')
						->setParameter('snCompanyId', $snCompanyId)
						->setParameter('sndate', $snDate)
						->setParameter('ssStatus', 'active');
			return $data = $ssQuery->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
	 }

	 /**
     * function getCityOfCOmpany
     *
     * @param integer $snCompanyId    field name
	 * @param integer $ssLocale    field name
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getInsuranceDetailByCompanyIdAndCountryId($snCompanyId, $snCountryId, $ssLocale)
	 {
		return $ssQuery = $this->createQueryBuilder('c')
						->select('c,i,it,ic')
						->leftJoin('c.insurances', 'i')
						->leftJoin('i.translations', 'it WITH it.locale = :locales')
						->leftJoin('i.countries', 'ic')
						->where('c.id= :snId')
						->setParameter('snId', $snCompanyId)
						->setParameter('locales', $ssLocale)
						->andwhere('ic.id= :country_id')
						->setParameter('country_id', $snCountryId)
						->getQuery()
                        ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
	 }

	 /**
     * function getCountryNameByZipcode
     *
     * @param int $zipcode zipcode
     *
     * @todo   Function get country name through zipcode
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getCountryNameByZipcode($zipcode)
	{
		$url = "http://maps.googleapis.com/maps/api/geocode/json?address=".$zipcode."&sensor=false";
		$details=file_get_contents($url);
		$result = json_decode($details,true);
		$lat=$result['results'][0]['geometry']['location']['lat'];
		$lng=$result['results'][0]['geometry']['location']['lng'];
		$geocode=file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?latlng='.$lat.','.$lng.'&sensor=false');
		$output= json_decode($geocode);
		return $output->results[0]->address_components[4]->long_name;
	}

	/**
     * function getCountryNameByZipcode
     *
     * @param int $zipcode zipcode
     *
     * @todo   Function get country name through zipcode
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function calculateSpecialOfferDiscount($snRegularPrice, $snSpecialPrice)
	{
		if($snRegularPrice != '' && $snSpecialPrice != '')
			return $snResult = ((($snRegularPrice - $snSpecialPrice)/$snRegularPrice) * 100);
		else
			return false;
	}

	 /**
     * function getCityOfCOmpany
     *
     * @param integer $snCompanyId    field name
	 * @param integer $ssLocale    field name
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getCompanyDetailByIds($asCompanyId, $ssLocale='')
	 {
		if(is_array($asCompanyId) && !empty($asCompanyId))
		{
			$ssSubQueryRatingAvg = $this->getEntityManager()
            ->createQuery('SELECT ((AVG(r.services) + AVG(r.staff) + AVG(r.environment)) / 3) FROM AdminMedicalBundle:Ratings r where r.company = c.id and r.verify_flag = 1');

			$ssSubQueryRatingCnt = $this->getEntityManager()
            ->createQuery('SELECT COUNT(rsss.company) FROM AdminMedicalBundle:Ratings rsss where rsss.company = c.id and rsss.verify_flag = 1');

			return  $ssQuery = $this->createQueryBuilder('c')
						->select('ci,partial c.{id,name,address},ct,ctt,lang,('.$ssSubQueryRatingAvg->getDQL().') as total_avg, ('.$ssSubQueryRatingCnt->getDQL().') as total_rating_count')
						->leftJoin('c.companyimages', 'ci')
						->leftJoin('c.category', 'ct')
						->leftJoin('ct.roots', 'ctt')
						->leftJoin('c.languagess', 'lang')
						->where('c.id IN ('.implode(',',$asCompanyId).')')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
		}
		else
			return array();
	 }

	/**
     * function getCityOfCOmpany
     *
     * @param integer $snCompanyId    field name
	 * @param integer $ssLocale    field name
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getOnlyCompanyDetailByIds($asCompanyId)
	 {
		if(is_array($asCompanyId) && !empty($asCompanyId))
		{
			return  $ssQuery = $this->createQueryBuilder('c')
						->select('c.email,c.id,c.disable_quotes,c.premium_company')
                        ->where('c.id IN ('.implode(',',$asCompanyId).')')
						->andwhere('c.disable_quotes= :ssValue')
						->setParameter('ssValue', 0)
						->getQuery()
						->getArrayResult();
		}
		else
			return array();
	 }

	 /**
     * function getRandomCompany
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getRandomCompany($ssLocale='en')
	 {
		$config = $this->getEntityManager()->getConfiguration();
		$config->addCustomNumericFunction('RAND', 'DoctrineExtensions\Query\Mysql\Rand');

		$asCompanyIds = array();

		$asData = $this->createQueryBuilder('cmp')
							 ->addSelect('RAND() as HIDDEN rand')
							 ->orderBy('rand')
							 ->setMaxResults(2)
							 ->getQuery()
							 ->getArrayResult();
		if(count($asData) > 0)
		{
			foreach($asData as $snKey=>$asVal)
				$asCompanyIds[] = $asVal['id'];
		}

		if(count($asCompanyIds) > 0)
		{
		$ssQuery = $this->createQueryBuilder('c')
						->select('ci,c,ctt,ct')
						->leftJoin('c.companyimages', 'ci')
						->leftJoin('c.category', 'ctt')
						->leftJoin('ctt.roots', 'ct');
						if(count($asCompanyIds) > 0)
						{
							$ssQuery->Where('c.id IN ('.implode(',',$asCompanyIds).')');
						}
		return $ssQuery->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
		}
		else
			return array();
	 }

	 /**
     * function getCityOfCOmpany
     *
     * @param integer $snCompanyId    field name
	 * @param integer $ssLocale    field name
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getAllCompanyDetailsWithClient()
	 {
		$ssSubQuerySpecialOffer = $this->getEntityManager()
            ->createQuery('SELECT COUNT(sos.id) FROM AdminMedicalBundle:SpecialOffers sos where sos.company = c.id');

		$ssSubQueryUserCompanies = $this->getEntityManager()
            ->createQuery('SELECT COUNT(ucq.company) FROM AdminMedicalBundle:UserCompanyQuotes ucq where ucq.company = c.id');

		$ssSubQueryRatingAvg = $this->getEntityManager()
            ->createQuery('SELECT ((AVG(r.services) + AVG(r.staff) + AVG(r.environment)) / 3) FROM AdminMedicalBundle:Ratings r where r.company = c.id and r.verify_flag = 1');

		$ssSubQueryRatingCnt = $this->getEntityManager()
            ->createQuery('SELECT COUNT(rsss.company) FROM AdminMedicalBundle:Ratings rsss where rsss.company = c.id and rsss.verify_flag = 1');

		$ssSubQueryUnverifyRatingCnt = $this->getEntityManager()
            ->createQuery('SELECT COUNT(unr.company) FROM AdminMedicalBundle:Ratings unr where unr.company = c.id and unr.verify_flag = 0');

		return $ssQuery = $this->createQueryBuilder('c')
						->select('c.id,c.name,c.company_code,c.updated_at,('.$ssSubQueryUserCompanies->getDQL().') as count_popularity,('.$ssSubQueryRatingAvg->getDQL().') as total_avg,('.$ssSubQueryRatingCnt->getDQL().') as total_rating_count, ('.$ssSubQueryUnverifyRatingCnt->getDQL().') as total_unverify_rating_count,('.$ssSubQuerySpecialOffer->getDQL().') as count_specialoffer')
						->getQuery()
						->getArrayResult();
	}


	/**
     * function getCityOfCOmpany
     *
     * @param integer $snCompanyId    field name
	 * @param integer $ssLocale    field name
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getAutoCompleteDetail($ssField, $ssSearchParam='')
	{
		if($ssSearchParam != '')
		{
			$ssQuery = $this->createQueryBuilder('c')
						->select('c');

			$asSearchData = explode(',', $ssSearchParam);

			foreach($asSearchData as $snKey=>$ssVal)
			{
				eval("\$"."ssQuery->orWhere('c.".$ssField." LIKE :ssNameParam".$snKey."')
								  ->setParameter('ssNameParam".$snKey."','".$ssVal."%');");
			}
			return  $ssQuery->getQuery()
						->getArrayResult();
		}
		else
		{
			return array();
		}
	}

	public function calculateReservationFee($asFeerulesData, $ssServicePrice)
	{
		$snServicePriceAfterPercentageValue = (($ssServicePrice * $asFeerulesData['fixed_fee_percentage']) / 100);
		return $snFixedFee = round((($snServicePriceAfterPercentageValue < $asFeerulesData['fixed_fee']) ? $asFeerulesData['fixed_fee'] : $snServicePriceAfterPercentageValue),2);
	}

	public function changepassword($cid, $encodedpassword)
	{
		return $asData = $this->getEntityManager()
			->createQuery("update AdminMedicalBundle:Company c set c.password = '" . $encodedpassword . "' where c.id = " . $cid . "")
			->execute();
	}

	public function getDataByCompanyId($ssLocale,$snCompanyId)
	{
		$ssQuery = $this->createQueryBuilder('comp')
						->select('partial comp.{id}','ct','partial ctt.{id,name}')
						->leftjoin('comp.category','ct')
						->leftjoin('ct.categories','ctt')
						->andWhere('comp.id = :snId')
						->setParameter('snId',$snCompanyId)
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();

		$asCategoryDetail = array();
		if(count($ssQuery) > 0 && count($ssQuery[0]['category']) > 0)
		{
			foreach($ssQuery[0]['category'] as $snKey=>$asVal)
			{
				$asCategoryDetail[$asVal['categories']['id']] = $asVal['categories']['name'];
			}
		}
		return $asCategoryDetail;
	}

	function getLocationInfoByIp($ip)
	{
		$result['country'] = '';
		$ip_data = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=".$ip));
		if($ip_data && $ip_data->geoplugin_countryName != null){
			$result['country'] = $ip_data->geoplugin_countryName;
			$result['city'] = $ip_data->geoplugin_city;
		}
		return $result['country'];
	}

	 /**
     * function getRandomCompany
     *
     * @todo   Function get company detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getCompanyByCategoyId($ssLocale='en', $snCategoryId)
	 {
		$config = $this->getEntityManager()->getConfiguration();
		$config->addCustomNumericFunction('RAND', 'DoctrineExtensions\Query\Mysql\Rand');

		$asCompanyIds = array();

		$asData = $this->createQueryBuilder('cmp')
								 ->addSelect('RAND() as HIDDEN rand,cmp,ct,ctt')
								 ->orderBy('rand')
								 ->leftjoin('cmp.category','ct')
								 ->leftJoin('ct.categories', 'ctt')
								 ->andWhere('ctt.id = :snId')
								 ->setParameter('snId',$snCategoryId)
								 ->getQuery()
								 ->getArrayResult();
			if(count($asData) > 0)
			{
				foreach($asData as $snKey=>$asVal)
					$asCompanyIds[] = $asVal['id'];
			}

		if(count($asCompanyIds) > 0)
		{
			$asCompanyIds = array_slice($asCompanyIds, 0, 2);
			return $ssQuery = $this->createQueryBuilder('c')
						->select('ci,c,ct,ctt')
						->leftJoin('c.companyimages', 'ci')
						->leftjoin('c.category','ct')
						->leftJoin('ct.roots', 'ctt')
						->where('c.id IN ('.implode(',',$asCompanyIds).')')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
		}
		else
			return array();
	 }

	public function Slug($string)
	{
		return strtolower(trim(preg_replace('~[^0-9a-z]+~i', '-', html_entity_decode(preg_replace('~&([a-z]{1,2})(?:acute|cedil|circ|grave|lig|orn|ring|slash|th|tilde|uml);~i', '$1', htmlentities($string, ENT_QUOTES, 'UTF-8')), ENT_QUOTES, 'UTF-8')), '-'));
	}

	/**
	* function getRandomCompany
	*
	* @todo Function get company detail by id.
	* @access public
	* @author Arpita Jadeja <arpita.j.php@gmail.com>
	* @return array
	*/
	public function getCompanyByDoctorId($ssLocale='en', $snDoctorId)
	{
		$config = $this->getEntityManager()->getConfiguration();
		$config->addCustomNumericFunction('RAND', 'DoctrineExtensions\Query\Mysql\Rand');

		$asCompanyIds = array();

		$asData = $this->createQueryBuilder('cmp')
		->addSelect('RAND() as HIDDEN rand,cmp,d')
		->orderBy('rand')
		->leftjoin('cmp.doctors','d')
		->andWhere('d.id = :snId')
		->setParameter('snId',$snDoctorId)
		->getQuery()
		->getArrayResult();
		if(count($asData) > 0)
		{
			foreach($asData as $snKey=>$asVal)
			$asCompanyIds[] = $asVal['id'];
		}

		if(count($asCompanyIds) > 0)
		{
			$asCompanyIds = array_slice($asCompanyIds, 0, 2);
			return $ssQuery = $this->createQueryBuilder('c')
			->select('ci,c,d')
			->leftJoin('c.companyimages', 'ci')
			->leftjoin('c.doctors','d')
			->where('c.id IN ('.implode(',',$asCompanyIds).')')
			->getQuery()
			->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
			->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
			->getArrayResult();
		}
		else
			return array();
	}

	public function getCompanyImag($id)
	{
		$ssQuery = $this->createQueryBuilder('c')
						->select('ci.photo,ci.id')
						->leftjoin('c.companyimages','ci')
						->Where('ci.company = '.$id)
						->orderBy('ci.id','DESC');


		$result = $ssQuery->getQuery()
						->getArrayResult();
		if(!empty($result))
			return $result[0]['photo'];
		else
			return '';
	}

	public function getCompanyLanguagess($id)
	{
		$ssQuery = $this->createQueryBuilder('c')
						->select('l.name,l.id,l.flag')
						->leftjoin('c.languagess','l')
						->Where('l.languagess = '.$id);


		$result = $ssQuery->getQuery()
						->getArrayResult();
		echo "<pre>";print_r($result);exit;
		if(!empty($result))
			return $result[0]['photo'];
		else
			return '';
	}
}
