<?php

namespace Admin\MedicalBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
	/**
     * function getActiveCatgoryDetails
     *
     * @param string $status status  
     *
     * @todo   Function get active category detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getActiveCatgoryDetails($status)
	{
		return $asData = $this->getEntityManager()
		->createQuery("SELECT COUNT(c.id) as active_count FROM AdminMedicalBundle:Category c where c.status = '".$status."'")
		->getArrayResult();
	}
	
	/**
     * function updateCategoryStatus
     *
     * @param integer $snCategoryId categoryid.  
	 * @param string  $ssStatus     status.
     *
     * @todo   Function to update category status.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function updateCategoryStatus($snCategoryId, $ssStatus)
    {
        if(is_numeric($snCategoryId) && $snCategoryId != '')
		{	
			return $asData = $this->getEntityManager()
								  ->createQuery("update AdminMedicalBundle:Category u set u.status = '".$ssStatus."' where u.id = ".$snCategoryId)
				                  ->execute();
		}
		else
		{
			return false;
		}
    }
	
	/**
     * function deleteData
     *
     * @param array $asIds categoryid.	 
     *
     * @todo   Function to update category status.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function deleteData($asIds) 
    {
        $asData = $this->getEntityManager()
					   ->createQuery('Delete FROM AdminMedicalBundle:Category i where i.id IN ('.$asIds.')')
					   ->execute();
		return true;
    }
	
	/**
     * function getAllCategoryDetail
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $snParentId   parentid.
	 * @param integer $snCategoryId categoryid.
	 * @param string  $ssStatus     status.
     *
     * @todo   Function to get all category detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllCategoryDetail($ssLocale, $snParentId='',$snCategoryId='',$ssStatus='')
	{
		$ssQuery = $this->createQueryBuilder('c')
						->select('c');
						if($snParentId != '')
						{
							$ssQuery->where('c.parent_id = :snId')
									->setParameter('snId', 0);
						}
						if($snCategoryId != '')
						{
							$ssQuery->where('c.id = :snId')
									->setParameter('snId', $snCategoryId);
						}	
						if($ssStatus != '')
						{
							$ssQuery->andWhere('c.status = :ssStatus')
									->setParameter('ssStatus', $ssStatus);
						}						
		return $ssQuery->orderBy('c.id','DESC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
	}
	
	/**
     * function getAllTranslationCategoryDetailObject
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $snParentId   parentid.	 
     *
     * @todo   Function to get all translation detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllTranslationCategoryDetailObject($ssLocale, $snParentId='')
	{
		$ssQuery = $this->createQueryBuilder('c')
						->select('c');						
						if($snParentId != '')
						{
							$ssQuery->where('c.parent_id = :snId')
									->setParameter('snId', 0);
						}
		return $ssQuery->orderBy('c.id','DESC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getResult();
	}	
	
	/**
     * function getAllCategoryInTree
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $snParentId   parentid.	 
     *
     * @todo   Function to get all category.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllCategoryInTree($ssLocale, $snParentId='')
	{
		$ssQuery = $this->createQueryBuilder('c')
						->select('c')						
						->where('c.parent_id = :snId')
						->setParameter('snId', $snParentId);
						
		
		return $ssQuery->orderBy('c.id','DESC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
						
	}
	
	/**
     * function getMainCategory
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $level        level.	 
     *
     * @todo   Function to get main category.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getMainCategory($ssLocale, $level=1)
	{	
		$ssQuery = $this->createQueryBuilder('c')
						->select('c')
						->where('c.lvl = :catLvl')
						->setParameter('catLvl', $level);
						
		return $ssQuery->orderBy('c.id','DESC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getResult();
						
	}
	
	/**
     * function getAllSubCategory
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $parent_id    parent id.	 
     *
     * @todo   Function to get all subcategory.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllSubCategory($ssLocale, $parent_id)
	{	
		$ssQuery = $this->createQueryBuilder('c')
						->select('c')						
						->where('c.parent_id = :parent_id')
						->setParameter('parent_id', $parent_id);
						
		return $ssQuery->orderBy('c.id','ASC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
						
	}
	
	/**
     * function getAllSubOfSubCategory
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $parent_id    parent id.	 
     *
     * @todo   Function to get all sub of subcategory.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllSubOfSubCategory($ssLocale, $parent_id)
	{	
		$ssQuery = $this->createQueryBuilder('c')
						->select('c')						
						->where('c.parent_id = :parent_id')
						->setParameter('parent_id', $parent_id);
		
		return $ssQuery->orderBy('c.id','ASC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
						
	}
	
	/**
     * function getAllSubCategoryWithLevel
     *
     * @param string  $ssLocale     current culture.
	 * @param integer $parent_id    parent id.	 
	 * @param integer $level        level id.
     *
     * @todo   Function to get all subcategory with level wise.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllSubCategoryWithLevel($ssLocale, $parent_id,$level)
	{	
		$ssQuery = $this->createQueryBuilder('c')
						->select('c')						
						->where('c.parent_id = :parent_id')
						->setParameter('parent_id', $parent_id)
						->andWhere('c.lvl = :level')
						->setParameter('level', $level);
		
		return $ssQuery->orderBy('c.id','ASC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
						
	}
	
	/**
     * function getAllCategoryInBlock
     *
     * @param string  $ssLocale current culture.	 
     *
     * @todo   Function to get all category in block.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllCategoryInBlock($ssLocale)
	{
		$ssQuery = $this->createQueryBuilder('c')
						->select('c')
						->orderBy('c.name','ASC');						                        						
		return $ssQuery->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
	}	
  
	/**
     * function getAllSubCategoryDetail
     *
     * @param string  $ssLocale current culture.	 
	 * @param string  $ssFlag   current flag.
     *
     * @todo   Function to get all sub category.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */
	public function getAllSubCategoryDetail($ssLocale, $ssFlag='')
	{
		$asData = $this->createQueryBuilder('c')
						->select('c')											
						->orderBy('c.parent_id')
						->orderBy('c.id','DESC')
						->getQuery()
						->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					    ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $ssLocale)
						->getArrayResult();
		
		$menu = array('items' => array(), 'parents' => array());
		
		foreach($asData as $snKey=>$asValue)
		{
			// Creates entry into items array with current menu item id ie. $menu['items'][1]
			$menu['items'][$asValue['id']]['name'] = $asValue['name'];
			$menu['items'][$asValue['id']]['status'] = $asValue['status'];
			$menu['items'][$asValue['id']]['level'] = $asValue['lvl'];
			// Creates entry into parents array. Parents array contains a list of all items with children
			$menu['parents'][$asValue['parent_id']][] = $asValue['id'];
		}
		
		$asData = array();

		foreach($menu['parents'] as $key=>$asVal)
		{
			if($key == 0)
			{	
				$i = 0;
				$asData = $this->recursion($asVal, $menu, $i, $ssFlag);
			}
		}
		return $asData;
	}
	
	/**
     * function recursion
     *
     * @param string  $asVal   current culture.	 
	 * @param string  $asMenu  current culture.
	 * @param string  $i       current flag.
	 * @param string  $ssFlag  current culture.
     *
     * @todo   Function to get all sub category.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */	
	public function recursion($asVal, $asMenu, $i, $ssFlag)
	{ 	
		global $asData;
		global $ssStr;
		foreach($asVal as $snKey=>$snValue)
		{		
			$ssStr = '';
			for($j=1;$j<$asMenu['items'][$snValue]['level'];$j++)
			{
				$ssStr .= "-";
			}
			if($ssFlag != '')
			{
				$asData[$snValue] = $ssStr.$asMenu['items'][$snValue]['name'];
			}
			else
			{
				$ssIDWithLevel = $snValue."~~".$asMenu['items'][$snValue]['level']."~~".$asMenu['items'][$snValue]['status'];
				$asData[$ssIDWithLevel] = $ssStr.$asMenu['items'][$snValue]['name'];
			}
			if(array_key_exists($snValue,$asMenu['parents']))
			{
				$i++;
				$this->recursion($asMenu['parents'][$snValue], $asMenu, $i, $ssFlag);		
			}
		}
		return $asData;
	}
	
	/**
     * function getCatgoryDetails
     *
     * @param array $asIds categoryids.	 	
     *
     * @todo   Function to get all sub category.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array.
     */	
	public function getCatgoryDetails($asIds)
    {
        return $asData = $this->getEntityManager()
            ->createQuery('SELECT c FROM AdminMedicalBundle:Category c where c.id IN ('.$asIds.')')
            ->getArrayResult();        
    }
}