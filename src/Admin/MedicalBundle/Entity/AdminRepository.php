<?php

namespace Admin\MedicalBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;

/**
 * AdminRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdminRepository extends EntityRepository implements UserProviderInterface
{
	/**
     * function loadUserByUsername
     *
     * @param string $email email     
     *
     * @todo   Function to check email user exist or not.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return object.
     */
	public function loadUserByUsername($email)
	{
		$q = $this
				->createQueryBuilder('u')
				->where('u.login = :login')
				->setParameter("login", $email)
				->getQuery();
			try 
			{
				// The Query::getSingleResult() method throws an exception
				// if there is no record matching the criteria.
				$user = $q->getSingleResult();
			}
			catch (NoResultException $e) 
			{
				throw new UsernameNotFoundException('No user found for email '.$email);
			}       
			return $user;
	}
	
	/**
     * function refreshUser
     *
     * @param  object $user email     
     *
     * @todo   Function to load user after login.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return object.
     */
	public function refreshUser(UserInterface $user)
	{
			$class = get_class($user);
			if (!$this->supportsClass($class)) {
					throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
			}

			return $this->loadUserByUsername($user->getUsername());
	}
	
	public function supportsClass($class)
	{
			return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
	}
}