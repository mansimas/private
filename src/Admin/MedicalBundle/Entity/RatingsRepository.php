<?php

namespace Admin\MedicalBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RatingsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RatingsRepository extends EntityRepository
{
	/**
     * function getRatingDetail
     *
     * @param integer $snId    companyid
	 * @param string  $ssFlag  flag
     *
     * @todo   Function get rating detail.
     * @access public
     * @author Arpita Rana <arpita.j.php@gmail.com>
     * @return array
     */
    public function getRatingDetail($snId, $ssFlag='')
    {		
		$ssSubQueryService = $this->getEntityManager()
            ->createQuery('SELECT AVG(rs.services) FROM AdminMedicalBundle:Ratings rs where rs.company = '.$snId.' and rs.verify_flag = 1');
			
		$ssSubQueryStaff = $this->getEntityManager()
            ->createQuery('SELECT AVG(rss.staff) FROM AdminMedicalBundle:Ratings rss where rss.company = '.$snId.' and rss.verify_flag = 1');
		
		$ssSubQueryEnv = $this->getEntityManager()
            ->createQuery('SELECT AVG(rse.environment) FROM AdminMedicalBundle:Ratings rse where rse.company = '.$snId.' and rse.verify_flag = 1');
		
		$ssSubQueryToaSerStaffEnv = $this->getEntityManager()
            ->createQuery('SELECT ((AVG(rsse.services) + AVG(rsse.staff) + AVG(rsse.environment)) / 3) FROM AdminMedicalBundle:Ratings rsse where rsse.company = '.$snId.' and rsse.verify_flag = 1');
			
		$ssQuery = $this->createQueryBuilder('r')
						->select('c.id,c.name as country_name,comp.name as comp_name, r.id,r.email,r.name,r.lastname,r.comments,r.services,r.staff,r.environment,r.verify_flag,r.rating_date, ((r.services + r.staff + r.environment) / 3) as total_avg, ('.$ssSubQueryService->getDQL().') as services_avg, ('.$ssSubQueryStaff->getDQL().') as staff_avg, ('.$ssSubQueryEnv->getDQL().') as environment_avg, ('.$ssSubQueryToaSerStaffEnv->getDQL().') as total_service_staff_environment_avg')
						->leftJoin('r.countries', 'c')
						->leftJoin('r.company', 'comp')
						->where('r.company= :snId')
						->setParameter('snId', $snId);
			if($ssFlag)
			{
				$ssQuery->andwhere('r.verify_flag = :ssFlag')
					    ->setParameter('ssFlag', 1);
			}	
						
		return $ssQuery->orderBy('r.id','DESC')
				    ->getQuery()			   	
			        ->getArrayResult();		
    }
	
	/**
     * function deleteData
     *
     * @param array $asIds ratingids    
     *
     * @todo   Function delete data from rating table.
     * @access public
     * @author Arpita Rana <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function deleteData($asIds) 
    {
        return $asData = $this->getEntityManager()
            ->createQuery('Delete FROM AdminMedicalBundle:Ratings i where i.id IN ('.$asIds.')')
             ->execute();
    }
	
	/**
     * function updateData
     *
     * @param integer $snIdRate     rate_id
     * @param integer $ssFieldName  field name
     *
     * @todo   Function update rating data.
     * @access public
     * @author Arpita Rana <arpita.j.php@gmail.com>
     * @return boolean
     */
	public function updateData($snIdRate, $ssFieldName='verify_flag') 
    {
        return $asData = $this->getEntityManager()
            ->createQuery('update AdminMedicalBundle:Ratings r set r.'.$ssFieldName.' = 1 where r.id = '.$snIdRate)
            ->execute();
    }
	
	/**
     * function getLatestRatingsDetail
     *           
     *
     * @todo   Function get latest 3 rating detail by date.
     * @access public
     * @author Arpita Rana <arpita.j.php@gmail.com>
     * @return array
     */
    public function getLatestRatingsDetail($ssFlag='')
    {   
		$ssQuery = $this->createQueryBuilder('r')
						->select('comp.id as company_id, r.id as rating_id,ci.photo,r.name,r.lastname,r.comments,r.services,r.staff,r.environment,r.verify_flag,r.rating_date, ((r.services + r.staff + r.environment) / 3) as total_avg')
						->leftJoin('r.company', 'comp')
						->leftJoin('comp.companyimages', 'ci')
						->andwhere('r.verify_flag = :ssFlag')
					    ->setParameter('ssFlag', 1);
						if($ssFlag == '')
							$ssQuery->setMaxResults(3);
							
		return 	$ssQuery->groupBy('r.id')						
						->orderBy('r.rating_date','DESC')						
						->getQuery()			   	
						->getArrayResult();
    }	
}