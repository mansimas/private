<?php

namespace Admin\MedicalBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserCompanyQuotesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserCompanyQuotesRepository extends EntityRepository
{
	/**
     * function updateData
     *
	 * @param integer $snQuoteId         quote id
	 * @param integer $snCompanyId       company id
	 * @param integer $asData            data
	 * @param integer $snQuoteUniqueId   quote uniqueid
	 * @param integer $snQuotePrice      quote price 
	 * @param integer $snReservationDate resevarion date
     * @param array   $snReservationTime reservation time
     *
     * @todo   Function to update data
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function updateData($snQuoteId, $snCompanyId, $asData, $snQuoteUniqueId, $snQuotePrice, $snReservationDate, $snReservationTime, $twentyfour = '')
    {
        if(is_numeric($snQuoteId) && $snQuoteId != '' && is_numeric($snCompanyId) && $snCompanyId != '')
		{		
			$ifnottwentyfour = '';
			if(!$twentyfour)
			{
				$ssOffers = '';
				if(isset($asData['offers']) && is_array($asData['offers']) && !empty($asData['offers']))
				{
					$ssOffers = implode($asData['offers'], ',');
				}
				$ifnottwentyfour = ",u.offers = '".$ssOffers."', u.specific_wishes = '".$asData['specific_wishes']."' ";
			}
		
         return $asData = $this->getEntityManager()
            ->createQuery("update AdminMedicalBundle:UserCompanyQuotes u set u.reservation_id = 'R".$snQuoteUniqueId."', u.checked_by_admin = 'No', u.service_price = '".$snQuotePrice."', u.reservation_date = '".$snReservationDate."', u.reservation_time = '".$snReservationTime."',u.checked_by_company = 'No', u.resi_address_one = '".$asData['resi_address_one']."' , u.updated_at = '".date('Y-m-d H:i:s')."', u.resi_address_two = '".$asData['resi_address_two']."', u.resi_city = '".$asData['resi_city']."', u.resi_state = '".$asData['resi_state']."', u.resi_zip = '".$asData['resi_zip']."' ".$ifnottwentyfour." where u.userquotedetails = ".$snQuoteId." and u.company = ".$snCompanyId)
            ->execute();
		}
		else
		{
			return false;
		}
    }
	
	/**
     * function updateTwentyFourHrsData
     *
     * @param integer $snQuoteId         quote id
	 * @param integer $snCompanyId       company id
	 * @param integer $asData            data
	 * @param integer $snQuoteUniqueId   quote uniqueid
	 * @param integer $snQuotePrice      quote price 
	 * @param integer $snReserDate       resevarion date      
     *
     * @todo   Function delete insurance detail
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function updateTwentyFourHrsData($snQuoteId, $snCompanyId, $asData, $snQuoteUniqueId, $snQuotePrice, $snReserDate)
    {
        if(is_numeric($snQuoteId) && $snQuoteId != '' && is_numeric($snCompanyId) && $snCompanyId != '')
		{	
			$ssOffers = '';
			if(isset($asData['offers']) && is_array($asData['offers']) && !empty($asData['offers']))
			{
				$ssOffers = implode($asData['offers'], ',');
			}
			$snDate = date("Y-m-d H:i:s", strtotime("+ 1 day"));
			
			return $asData = $this->getEntityManager()
            ->createQuery("update AdminMedicalBundle:UserCompanyQuotes u set u.checked_by_admin = 'No', u.reservation_id = 'R".$snQuoteUniqueId."', u.offers = '".$ssOffers."' , u.service_price = '".$snQuotePrice."', u.reservation_date = '".$snReserDate."', u.updated_at = '".date('Y-m-d H:i:s')."', u.specific_wishes = '".$asData['specific_wishes']."',u.quote_status = 'twenty_four',u.sent_unconfirmed_or_rating_mail='No', u.unconfirmed_twenty_four_or_final_reservation_date ='".$snDate."' where u.userquotedetails = ".$snQuoteId." and u.company = ".$snCompanyId)
            ->execute();
		}
		else
		{
			return false;
		}
    }
	
	/**
     * function getDetailForSixteenHrsReminder
     *        
     *
     * @todo   Function to get detail for sixteenHrs Reminder.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function getDetailForSixteenHrsReminder()
    {
        $ssQuery = $this->createQueryBuilder('ucq')
					->select('ucq','uqd','partial c.{id,name}')
					->leftJoin('ucq.userquotedetails','uqd')					
					->leftJoin('ucq.company','c')
					->where('ucq.quote_status = :ssReplyType')
					->setParameter('ssReplyType', 'twenty_four')			
					->andWhere('ucq.twenty_four_come_final IS NULL');
					
		return $ssQuery->getQuery()
				->getArrayResult();
    }
	
	/**
     * function updateFinalReservationData
     *
     * @param integer $snQuoteId             quote id
	 * @param integer $snCompanyId           company id
	 * @param integer $snPaypalTranscationId transaction id
	 * @param integer $ssPaypalStatus        payment status
     *
     * @todo   Function to update final reservation data.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function updateFinalReservationData($snQuoteId, $snCompanyId, $snPaypalTranscationId, $ssPaypalStatus)
    {
        if(is_numeric($snQuoteId) && $snQuoteId != '' && is_numeric($snCompanyId) && $snCompanyId != '')
		{	
			$ssOffers = '';
			if(isset($asData['offers']) && is_array($asData['offers']) && !empty($asData['offers']))
			{
				$ssOffers = implode($asData['offers'], ',');
			}
			$snDate = date("Y-m-d H:i:s", strtotime("+ 14 day"));
			
			return $asData = $this->getEntityManager()
            ->createQuery("update AdminMedicalBundle:UserCompanyQuotes u set u.checked_by_admin = 'No', u.paypal_transaction_id = '".$snPaypalTranscationId."' , u.updated_at = '".date('Y-m-d H:i:s')."', u.paypal_payment_status = '".$ssPaypalStatus."',u.quote_status = 'paid',u.sent_unconfirmed_or_rating_mail='No', u.unconfirmed_twenty_four_or_final_reservation_date ='".$snDate."' where u.userquotedetails = ".$snQuoteId." and u.company = ".$snCompanyId)
            ->execute();
		}
		else
		{
			return false;
		}
    }
	
	/**
     * function updateDataByField
     *
     * @param integer $snIdQuote    quote id
	 * @param integer $snIdCompany  company id
	 * @param integer $ssValue      value
	 * @param integer $ssFieldName  fieldname
     *
     * @todo   Function to update data by given field name and its value.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean.
     */
	public function updateDataByField($snIdQuote, $snIdCompany, $ssValue='Yes', $ssFieldName='checked_by_admin') 
    {
		return $asData = $this->getEntityManager()
            ->createQuery("update AdminMedicalBundle:UserCompanyQuotes ucq set ucq.updated_at = '".date('Y-m-d H:i:s')."', ucq.".$ssFieldName." = '".$ssValue."' where ucq.userquotedetails = ".$snIdQuote." and ucq.company = ".$snIdCompany)
            ->execute();
    }
	
	/**
     * function deleteData
     *
     * @param array $asIds field name     
     *
     * @todo   Function delete user company quotes.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return boolean
     */
    public function deleteData($asIds) 
    {
        return $asData = $this->getEntityManager()
            ->createQuery('Delete FROM AdminMedicalBundle:UserCompanyQuotes i where i.id IN ('.$asIds.')')
             ->execute();
    }
	
	/**
     * function getCompanyQuotesById
     *
     * @param integer $snQuoteId  quote id	 
     *
     * @todo   Function get company quote detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getCompanyQuotesById($snQuoteId='')
	 {
		if(is_numeric($snQuoteId) && $snQuoteId != '')
		{
			return  $ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq,c,uqd')						
						->leftJoin('ucq.company', 'c')	
						->leftJoin('ucq.userquotedetails', 'uqd')						
                        ->where('ucq.userquotedetails = '.$snQuoteId)
						->orderBy('ucq.id', 'DESC')
						->getQuery()						
						->getArrayResult();		
		}
		else
			return array();
	 }
	 
	 /**
     * function getReservationDetail
     *
     * @param integer $snCompanyId  companyid
     *
     * @todo   Function get reservation detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getReservationDetail($snCompanyId = '') 
    {	
		$ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq.id, ucq.quote_status as res_quote_status, ucq.unconfirmed_twenty_four_or_final_reservation_date, ucq.reservation_id, ucq.checked_by_admin, ucq.checked_by_company, ucc.reservation_date, ucc.service_price, ucc.service_description,ucc.user_type,ucc.company_offered_unique, uqd.id as quote_id, uqd.firstname, uqd.lastname , uqd.quote_status, c.id as company_id, c.name')						
						->leftJoin('ucq.userquotedetails','uqd')
						->leftJoin('ucq.company','c')
						->leftJoin('uqd.usercompanycommunication','ucc')
						->where('ucc.user_type = :ssUserType')
						->setParameter('ssUserType', 'company')
						->andWhere('ucc.company_offered_unique = :ssValue')
						->setParameter('ssValue', 'Yes')
						->andWhere('ucq.reservation_id IS NOT NULL');
												
					if($snCompanyId != '')
					{
						$ssQuery->andWhere('ucq.quote_status = :ssStatus')
						->setParameter('ssStatus', 'paid')
						->andWhere('ucq.company = :snCompanyId')
						->setParameter('snCompanyId', $snCompanyId)
						->andWhere('ucc.company = :snCompanyIds')
						->setParameter('snCompanyIds', $snCompanyId);
					}
		return $ssQuery->orderBy('ucq.id','DESC')
						->getQuery()
				    	->getArrayResult();
	}
	
	/**
     * function getAllReservationDetail
     *     	 
     *
     * @todo   Function get all reservation detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getAllReservationDetail() 
    {	
		$ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq.id, ucq.paypal_payment_status, ucq.quote_status as res_quote_status,ucq.reservation_date, ucq.reservation_time,ucq.service_price, ucq.unconfirmed_twenty_four_or_final_reservation_date, ucq.reservation_id, ucq.checked_by_admin, ucq.checked_by_company, uqd.id as quote_id, uqd.firstname, uqd.lastname , uqd.quote_status, c.id as company_id, c.name')
						->leftJoin('ucq.userquotedetails','uqd')
						->leftJoin('ucq.company','c')
						->Where('ucq.reservation_id IS NOT NULL');											
					
		return $ssQuery->orderBy('ucq.id','DESC')
						->getQuery()
				    	->getArrayResult();
	}
	
	/**
     * function getQuoteReservationDetail
     *
     * @param integer $snQuoteId   quoteid.
	 * @param integer $snCompanyId companyid.
	 * @param integer $ssFlag      flag.
     *
     * @todo   Function get quote reservation detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getQuoteReservationDetail($snQuoteId, $snCompanyId,$ssFlag = '') 
    {	
		 $ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq','cn','uqd','uqdcn')
						->leftJoin('ucq.countries','cn')
						->leftJoin('ucq.userquotedetails','uqd')
						->leftJoin('uqd.countries','uqdcn')
						->where('ucq.userquotedetails = :snQuoteId')
						->setParameter('snQuoteId', $snQuoteId)
						->andWhere('ucq.company = :snCompanyId')
						->setParameter('snCompanyId', $snCompanyId);
						
						if($ssFlag == ''){
							$ssQuery->andWhere('ucq.paypal_payment_status = :ssStatus')
									->setParameter('ssStatus', 1);
						}
						
						return $ssQuery->getQuery()
										->getArrayResult();
	}
	
	/**
     * function getQuoteAllDetail
     *
     * @param integer $snQuoteId   quoteid.
	 * @param integer $snCompanyId companyid.
	 * @param srting  $ssType      user type.
     *
     * @todo   Function to get all quote.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getQuoteAllDetail($snQuoteId, $snCompanyId, $ssType='company') 
    {	
		return $ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq','uqd','c','ucc','cn','uqdcn')
						->leftJoin('ucq.userquotedetails','uqd')
						->leftJoin('ucq.countries','cn')
						->leftJoin('uqd.countries','uqdcn')
						->leftJoin('ucq.company','c')	
						->leftJoin('uqd.usercompanycommunication','ucc')						
						->where('ucq.userquotedetails = :snQuoteId')
						->setParameter('snQuoteId', $snQuoteId)
						->andWhere('ucq.company = :snCompanyId')						
						->setParameter('snCompanyId', $snCompanyId)
						->andWhere('ucc.company_offered_unique = :companyOffer')						
						->setParameter('companyOffer', 'Yes')
						->andwhere('ucc.user_type = :type')
						->setParameter("type", $ssType)
						->andWhere('ucc.company = :snCommuCompanyId')
						->setParameter('snCommuCompanyId', $snCompanyId)
						->orderBy('ucc.id','DESC')
						->setMaxResults(1)
						->getQuery()						
				    	->getArrayResult();
	}
	
	/**
     * function countByCheckedAdmin
     *     
     *
     * @todo   Function to get count of checked by admin.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function countByCheckedAdmin() 
    {	
		return $ssQuery = $this->createQueryBuilder('ucq')
						->select('COUNT(ucq.id) as paid_reservation_count')						
						->where('ucq.reservation_id IS NOT NULL')						
						->andWhere('ucq.checked_by_admin = :ssFlag')
						->setParameter('ssFlag', 'No')											
						->getQuery()
						->getArrayResult();
	}	
	
	/**
     * function getTwentyFourUnconfirmedORFinalReservationDetail
     *  
     * @param string $ssStatus  status.
     *
     * @todo   Function get twenty four unconfirmed detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getTwentyFourUnconfirmedORFinalReservationDetail($ssStatus)
    {	
		return $ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq','uqd','c')
						->leftJoin('ucq.company','c')
						->leftJoin('ucq.userquotedetails','uqd')
						->where('ucq.quote_status = :ss_quote_status')
						->setParameter('ss_quote_status', $ssStatus)	
						->andWhere('ucq.unconfirmed_twenty_four_or_final_reservation_date < :snDate')
						->setParameter('snDate', date('Y-m-d H:i:s'))
						->andWhere('ucq.sent_unconfirmed_or_rating_mail = :ssStatus')
						->setParameter('ssStatus', 'No')
						->getQuery()
						->getArrayResult();
	}
	
	/**
     * function checkCountOfTotalAndArchiveQuote
     *    
	 * @param integer $snQuoteIds   quoteid.
     *
     * @todo   Function get count of totalarchive quote
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function checkCountOfTotalAndArchiveQuote($snQuoteIds)
    {	
		$ssSubQuery = $this->getEntityManager()
            ->createQuery("SELECT COUNT(ucc1.userquotedetails) FROM AdminMedicalBundle:UserCompanyQuotes ucc1 where ucc1.userquotedetails = ucc.userquotedetails");
			
		$ssArchiveSubQuery = $this->getEntityManager()
            ->createQuery("SELECT COUNT(ucc2.userquotedetails) FROM AdminMedicalBundle:UserCompanyQuotes ucc2 where ucc2.userquotedetails = ucc.userquotedetails and ucc2.quote_status = 'archive'");
			
		$ssQuery = $this->createQueryBuilder('ucc')
					->select('ucc.id,uqd.id as user_quote_detail_id, ('.$ssSubQuery->getDQL().') as total_quote, ('.$ssArchiveSubQuery->getDQL().') as total_archive_quote')
					->leftJoin('ucc.userquotedetails','uqd')
					->where('ucc.userquotedetails IN ('.$snQuoteIds.')')							
					->groupBy('ucc.userquotedetails');
					
		return 	$ssQuery->getQuery()
				    	->getArrayResult();
	}
	
	/**
     * function getCompanyWiseQuoteStatus
     *
     * @param integer $snQuoteId   quoteid.
	 * @param integer $snCompanyId companyid.    	 
     *
     * @todo   Function to get company wise quote detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getCompanyWiseQuoteStatus($snQuoteId, $snCompanyId) 
    {	
		return $ssQuery = $this->createQueryBuilder('ucq')
						->select('ucq.quote_status,ucq.paypal_payment_status')						
						->where('ucq.userquotedetails = :snQuoteId')
						->setParameter('snQuoteId', $snQuoteId)
						->andWhere('ucq.company = :snCompanyId')
						->setParameter('snCompanyId', $snCompanyId)
						->getQuery()
				    	->getArrayResult();
	}
	
	/**
     * function getQuotewiseCompanyDetail
     *
     * @param integer $snQuoteId   quoteid.
     *
     * @todo   Function to get quote wise company detail.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	public function getQuotewiseCompanyDetail($snQuoteId='') 
    {	
		$ssSubQuery = $this->getEntityManager()
            ->createQuery("SELECT COUNT(ucq.id) FROM AdminMedicalBundle:UserCompanyCommunication ucq where ucq.checked_by_client = 'No' and ucq.user_type='company' and ucq.userquotedetails = '".$snQuoteId."' and ucq.company = ucqs.company");
		
		$ssSubOfferedQuery = $this->getEntityManager()
            ->createQuery("SELECT uccq.company_offered FROM AdminMedicalBundle:UserCompanyCommunication uccq where uccq.company_offered = 'Yes' and uccq.user_type='company' and uccq.userquotedetails = '".$snQuoteId."' and uccq.company = ucqs.company");
			
		$ssQuery = $this->createQueryBuilder('ucqs')
					->select('c, ucqs, ('.$ssSubOfferedQuery->getDQL().') as company_offered, ('.$ssSubQuery->getDQL().') as cnt_unread_meesage','c.id,c.name')
					->leftJoin('ucqs.company','c')
					->where('ucqs.userquotedetails = :snId')
					->setParameter('snId', $snQuoteId);
					
		return  $ssQuery->getQuery()
				    	->getArrayResult();
	}
	
	/**
     * function getCompanyQuotesById
     *
     * @param integer $snQuoteId  quote id	 
	 * @param integer $snCompanyId  quote id
     *
     * @todo   Function get company quote detail by id.
     * @access public
     * @author Arpita Jadeja <arpita.j.php@gmail.com>
     * @return array
     */
	 public function getFinalQuotesPriceCompanyByQuoteId($snQuoteId, $snCompanyId)
	 {
		if(is_numeric($snQuoteId) && $snQuoteId != '' && is_numeric($snCompanyId) && $snCompanyId != '')
		{
			$ssQuery = $this->createQueryBuilder('ucq')
						->select('partial ucq.{id},partial c.{id,name,email,final_price_info}, partial uqd.{id}')						
						->leftJoin('ucq.company', 'c')	
						->leftJoin('ucq.userquotedetails', 'uqd')						
                        ->where('ucq.userquotedetails = '.$snQuoteId)
						->andWhere('c.final_price_info = 1')						
						->andWhere('c.disable_quotes != 1')
						->andWhere('ucq.company != '.$snCompanyId);
						
			return	$ssQuery->getQuery()
						    ->getArrayResult();
		}
		else
			return array();
	 }
}